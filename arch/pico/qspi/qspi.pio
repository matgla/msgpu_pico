// This file is part of msgpu project.
// Copyright (C) 2021 Mateusz Stadnik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

.program qspi_cpha0 
.side_set 1 
    out pins, 1 side 0 [1] 
    in pins, 1 side 1 [1]

.program qspi_cpha1 
.side_set 1 
    out x, 1 side 0 
    mov pins, x side 1 [1] 
    in pins, 1 side 0 

% c-sdk {

#include "hardware/gpio.h" 

static inline void pio_qspi_init(PIO pio,
    uint32_t sm,
    uint32_t prog_offs,
    uint32_t n_bits, 
    float clkdiv,
    bool cpha, 
    bool cpol, 
    uint32_t pin_sck,
    uint32_t pin_mosi, 
    uint32_t pin_miso,
    uint32_t pin_io2,
    uint32_t pin_io3) 
{
    pio_sm_config c = cpha ? qspi_cpha1_program_get_default_config(prog_offs) :
    qspi_cpha0_program_get_default_config(prog_offs);

    sm_config_set_out_pins(&c, pin_mosi, 1);

    sm_config_set_in_pins(&c, pin_miso);
    sm_config_set_sideset_pins(&c, pin_sck);

    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);

    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << pin_sck) | (1u << pin_mosi));
    pio_sm_set_pindirs_with_mask(pio, sm, (1u << pin_sck) | (1u << pin_mosi), (1u << pin_sck) | (1u << pin_mosi) | (1u
    << pin_miso));

    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_miso);
    pio_gpio_init(pio, pin_sck);
    pio_gpio_init(pio, pin_io2);
    pio_gpio_init(pio, pin_io3);

    gpio_set_outover(pin_sck, cpol ? GPIO_OVERRIDE_INVERT : GPIO_OVERRIDE_NORMAL);

    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);

    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);

}

static inline pio_qspi_init_qspi_read(
    PIO pio,
    uint32_t sm,
    uint32_t prog_offs,
    uint32_t n_bits,
    bool cpha,
    bool cpol,
    uint32_t pin_sck
    uint32_t pin_io0,
    uint32_t pin_io1, 
    uint32_t pin_io2, 
    uint32_t pin_io3
)
{
    pio_sm_config c = cpha ? qspi_cpha1_program_get_default_config(prog_offs) :
    qspi_cpha0_program_get_default_config(prog_offs);

    sm_config_set_out_pins(&c, pin_io0, 1);
    sm_config_set_out_pins(&c, pin_io1, 1);
    sm_config_set_out_pins(&c, pin_io2, 1);
    sm_config_set_out_pins(&c, pin_io3, 1);

    sm_config_set_sideset_pins(&c, pin_sck);

    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);

    pio_sm_set_pins_with_mask(pio, sm, 0, 
        (1u << pin_sck) 
        | (1u << pin_io0)
        | (1u << pin_io1)
        | (1u << pin_io2)
        | (1u << pin_io3)
    );

    pio_sm_set_pindirs_with_mask(pio, sm, 
        (1u << pin_sck) 
        | (1u << pin_io0), 
        | (1u << pin_io1),
        | (1u << pin_io2),
        | (1u << pin_io3),
        (1u << pin_sck) 
        | (1u << pin_io0),
        | (1u << pin_io1),
        | (1u << pin_io2), 
        | (1u << pin_io3));

    pio_gpio_init(pio, pin_sck);
    pio_gpio_init(pio, pin_io0);
    pio_gpio_init(pio, pin_io1);
    pio_gpio_init(pio, pin_io2);
    pio_gpio_init(pio, pin_io3);

    gpio_set_outover(pin_sck, cpol ? GPIO_OVERRIDE_INVERT : GPIO_OVERRIDE_NORMAL);

    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);

    pio_sm_init(pio, sm, prog_offs, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
